from .log_processor import LogProcessor
import pandas as pd


def parse_log(file_path):
    """
    Parse malware logs with specialized processing

    :param file_path: Path to malware log file
    :return: Dictionary of extracted features with malware-specific additions
    """
    processor = LogProcessor(dataset_type='malware')
    df = processor.load_and_clean(file_path)

    # Apply malware-specific feature engineering
    df = _detect_nonrepeating_chains(df)
    df = _identify_stealth_events(df)

    # Extract core features
    features = processor.extract_features(df)

    # Enhance session metadata with malware-specific features
    features['session_metadata'] = _add_malware_session_features(
        features['session_metadata'],
        features['event_features']
    )

    return features


def _detect_nonrepeating_chains(df):
    """Identify non-repeating event chains"""
    # Implementation remains the same as before
    df['chain_id'] = (df['id'] != df['id'].shift()).cumsum()
    chain_lengths = df.groupby('chain_id').size()
    df['nonrepeating_chain'] = df['chain_id'].map(chain_lengths) == 1
    return df


def _identify_stealth_events(df):
    """Flag stealth techniques"""
    # Implementation remains the same as before
    stealth_indicators = [
        'timestomp', 'rootkit', 'process_hollow', 'memory_injection',
        'anti_debug', 'code_injection', 'process_injection', 'hook',
        'masquerading', 'dll_hijack', 'registry_runkey', 'fileless'
    ]
    pattern = '|'.join(stealth_indicators)
    df['stealth_technique'] = df['message'].str.contains(
        pattern,
        case=False,
        na=False
    )
    return df


def _add_malware_session_features(session_meta, event_df):
    """Enhance session metadata with malware-specific aggregates"""
    # Implementation remains the same as before
    stealth_counts = event_df.groupby('session_id')['stealth_technique'].sum()
    chain_perc = event_df.groupby('session_id')['nonrepeating_chain'].mean()

    session_meta = session_meta.merge(
        stealth_counts.rename('stealth_count'),
        left_on='session_id',
        right_index=True,
        how='left'
    ).fillna(0)

    session_meta = session_meta.merge(
        chain_perc.rename('chain_anomaly'),
        left_on='session_id',
        right_index=True,
        how='left'
    ).fillna(0)

    session_meta['malware_score'] = (
            0.7 * session_meta['stealth_count'] +
            0.3 * session_meta['chain_anomaly']
    )

    return session_meta



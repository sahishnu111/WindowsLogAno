import pandas as pd
import os

def load_and_clean_anomalous_dataset(log_file_path: str) -> pd.DataFrame:
    '''
    Loads a log file of an anomalous dataset, converts data types, standardizes
    column names to match the normal dataset format, and performs cleaning.

    :param log_file_path: path of the log file malware dataset
                          e.g., 'WinLogAno/data/raw/evtx_logs/malware_data.csv'
    :return: A cleaned and processed pandas DataFrame.
    '''
    # --- File Loading and Validation ---
    if not os.path.exists(log_file_path):
        raise FileNotFoundError(f"The log file {log_file_path} does not exist.")

    try:
        print(f"Loading anomalous log file from: {log_file_path}")
        df = pd.read_csv(log_file_path)

        # --- Step 1: Define the mapping and select the data ---
        column_map = {
            'SystemTime': 'TimeCreated',
            'EventID': 'Id',
            'Level': 'LevelDisplayName',
            'ProviderName': 'ProviderName',
            'Description': 'Message',
            'Channel': 'LogName'
        }
        source_columns = list(column_map.keys())

        # --- Step 2: Create the new, structured DataFrame ---
        missing_cols = [col for col in source_columns if col not in df.columns]
        if missing_cols:
            raise ValueError(f"Missing required columns in the dataset: {missing_cols}")

        print("All required columns are present. Renaming columns...")
        df_malware = df[source_columns].copy()
        df_malware.rename(columns=column_map, inplace=True)
        # Also standardize to lowercase with underscores for consistency
        df_malware.columns = [col.strip().lower().replace(' ', '_') for col in df_malware.columns]


        # --- Step 3: Map Numeric Levels to Names ---
        print("Mapping numeric log levels to display names...")
        level_name_map = {
            0: 'Information', 1: 'Critical', 2: 'Error',
            3: 'Warning', 4: 'Information', 5: 'Verbose'
        }
        df_malware['leveldisplayname'] = pd.to_numeric(df_malware['leveldisplayname'], errors='coerce')
        df_malware['leveldisplayname'] = df_malware['leveldisplayname'].map(level_name_map)
        df_malware['leveldisplayname'].fillna('Unknown', inplace=True)


        # --- Step 4: Verify and correct other data types ---
        print("Converting data types...")
        # Convert 'timecreated' to datetime objects, coercing errors
        df_malware['timecreated'] = pd.to_datetime(df_malware['timecreated'], errors='coerce', utc=True)
        # Convert 'id' to a numeric type, coercing errors
        df_malware['id'] = pd.to_numeric(df_malware['id'], errors='coerce')


        # --- Step 5: Comprehensive Data Cleaning ---
        print("Cleaning and standardizing data...")

        # Drop rows where essential columns failed to parse
        df_malware.dropna(subset=['timecreated', 'id'], inplace=True)
        # Now safely convert 'id' to integer
        df_malware['id'] = df_malware['id'].astype(int)

        # Clean string columns: remove leading/trailing whitespace and fill any remaining NaN
        for col in ['providername', 'message', 'logname']:
            if col in df_malware.columns:
                df_malware[col] = df_malware[col].astype(str).str.strip().fillna('N/A')

        # Remove duplicate log entries
        initial_rows = len(df_malware)
        df_malware.drop_duplicates(inplace=True)
        if initial_rows > len(df_malware):
            print(f"Removed {initial_rows - len(df_malware)} duplicate rows.")

        # Sort the DataFrame by time
        df_malware.sort_values(by='timecreated', inplace=True)

        print("Anomalous data loading and cleaning complete.")
        return df_malware

    except Exception as e:
        print(f"An error occurred while processing the file: {e}")
        return pd.DataFrame()


